/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateAffiliateRequest,
  CreateAffiliateResponse,
  CreateSalePhaseRequest,
  CreateSalePhaseResponse,
  DeleteAffiliateResponse,
  DeleteSalePhaseResponse,
  GetAddressSummary400Response,
  GetAddressSummary401Response,
  GetAddressSummary403Response,
  GetAddressSummary404Response,
  GetAddressSummary429Response,
  GetAddressSummary500Response,
  ListSalePhasesResponse,
  RetrieveSalePhaseResponse,
} from '../models';
import {
    CreateAffiliateRequestFromJSON,
    CreateAffiliateRequestToJSON,
    CreateAffiliateResponseFromJSON,
    CreateAffiliateResponseToJSON,
    CreateSalePhaseRequestFromJSON,
    CreateSalePhaseRequestToJSON,
    CreateSalePhaseResponseFromJSON,
    CreateSalePhaseResponseToJSON,
    DeleteAffiliateResponseFromJSON,
    DeleteAffiliateResponseToJSON,
    DeleteSalePhaseResponseFromJSON,
    DeleteSalePhaseResponseToJSON,
    GetAddressSummary400ResponseFromJSON,
    GetAddressSummary400ResponseToJSON,
    GetAddressSummary401ResponseFromJSON,
    GetAddressSummary401ResponseToJSON,
    GetAddressSummary403ResponseFromJSON,
    GetAddressSummary403ResponseToJSON,
    GetAddressSummary404ResponseFromJSON,
    GetAddressSummary404ResponseToJSON,
    GetAddressSummary429ResponseFromJSON,
    GetAddressSummary429ResponseToJSON,
    GetAddressSummary500ResponseFromJSON,
    GetAddressSummary500ResponseToJSON,
    ListSalePhasesResponseFromJSON,
    ListSalePhasesResponseToJSON,
    RetrieveSalePhaseResponseFromJSON,
    RetrieveSalePhaseResponseToJSON,
} from '../models';

export interface CreateAffiliateOperationRequest {
    appId: string;
    collectionId: string;
    phaseId: string;
    createAffiliateRequest?: CreateAffiliateRequest;
}

export interface DeleteAffiliateRequest {
    appId: string;
    collectionId: string;
    phaseId: string;
    affiliateId: string;
}

export interface DeleteSalePhaseRequest {
    appId: string;
    collectionId: string;
    phaseId: string;
}

export interface NftCreateSaleRequest {
    appId: string;
    collectionId: string;
    createSalePhaseRequest?: CreateSalePhaseRequest;
}

export interface RetrieveSalePhaseRequest {
    appId: string;
    collectionId: string;
    phaseId: string;
}

export interface RetrieveSalePhasesRequest {
    appId: string;
    collectionId: string;
}

export interface UpdateAffiliateRequest {
    appId: string;
    collectionId: string;
    phaseId: string;
    affiliateId: string;
    createAffiliateRequest?: CreateAffiliateRequest;
}

export interface UpdateSalePhaseRequest {
    appId: string;
    collectionId: string;
    phaseId: string;
    createSalePhaseRequest?: CreateSalePhaseRequest;
}

/**
 * 
 */
export class NFTsSalePhasesApi extends runtime.BaseAPI {

    /**
     * Create affiliate.
     * Create affiliate
     */
    async createAffiliateRaw(requestParameters: CreateAffiliateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAffiliateResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createAffiliate.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling createAffiliate.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling createAffiliate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases/{phase_id}/affiliates`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"phase_id"}}`, encodeURIComponent(String(requestParameters.phaseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAffiliateRequestToJSON(requestParameters.createAffiliateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAffiliateResponseFromJSON(jsonValue));
    }

    /**
     * Create affiliate.
     * Create affiliate
     */
    async createAffiliate(requestParameters: CreateAffiliateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAffiliateResponse> {
        const response = await this.createAffiliateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete affiliate.
     * Delete Affiliate
     */
    async deleteAffiliateRaw(requestParameters: DeleteAffiliateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAffiliateResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteAffiliate.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling deleteAffiliate.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling deleteAffiliate.');
        }

        if (requestParameters.affiliateId === null || requestParameters.affiliateId === undefined) {
            throw new runtime.RequiredError('affiliateId','Required parameter requestParameters.affiliateId was null or undefined when calling deleteAffiliate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases/{phase_id}/affiliates/{affiliate_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"phase_id"}}`, encodeURIComponent(String(requestParameters.phaseId))).replace(`{${"affiliate_id"}}`, encodeURIComponent(String(requestParameters.affiliateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAffiliateResponseFromJSON(jsonValue));
    }

    /**
     * Delete affiliate.
     * Delete Affiliate
     */
    async deleteAffiliate(requestParameters: DeleteAffiliateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAffiliateResponse> {
        const response = await this.deleteAffiliateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a sale phase.
     * Delete sale phase
     */
    async deleteSalePhaseRaw(requestParameters: DeleteSalePhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSalePhaseResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteSalePhase.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling deleteSalePhase.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling deleteSalePhase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases/{phase_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"phase_id"}}`, encodeURIComponent(String(requestParameters.phaseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSalePhaseResponseFromJSON(jsonValue));
    }

    /**
     * Delete a sale phase.
     * Delete sale phase
     */
    async deleteSalePhase(requestParameters: DeleteSalePhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSalePhaseResponse> {
        const response = await this.deleteSalePhaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a sale phase for a given collection. You can add different phases to control how you will sell the collection. For example, you might have a total of 5000 NFTs, and you want to sell them in stages. You can create a pre-sale phase to sell 1000 NFTs to previous customers at a special price and within a specific time range. You can identify these customers with a condition; that would be an NFT with a certain policy id on their wallets. Then you create another sale phase for the public drop with the remaining 4000 NFTs and no conditions.   
     * Create sale phase
     */
    async nftCreateSaleRaw(requestParameters: NftCreateSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSalePhaseResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling nftCreateSale.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling nftCreateSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalePhaseRequestToJSON(requestParameters.createSalePhaseRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSalePhaseResponseFromJSON(jsonValue));
    }

    /**
     * Create a sale phase for a given collection. You can add different phases to control how you will sell the collection. For example, you might have a total of 5000 NFTs, and you want to sell them in stages. You can create a pre-sale phase to sell 1000 NFTs to previous customers at a special price and within a specific time range. You can identify these customers with a condition; that would be an NFT with a certain policy id on their wallets. Then you create another sale phase for the public drop with the remaining 4000 NFTs and no conditions.   
     * Create sale phase
     */
    async nftCreateSale(requestParameters: NftCreateSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSalePhaseResponse> {
        const response = await this.nftCreateSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details for a single sale phase.
     * Retrieve sale phase
     */
    async retrieveSalePhaseRaw(requestParameters: RetrieveSalePhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveSalePhaseResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling retrieveSalePhase.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveSalePhase.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling retrieveSalePhase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases/{phase_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"phase_id"}}`, encodeURIComponent(String(requestParameters.phaseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveSalePhaseResponseFromJSON(jsonValue));
    }

    /**
     * Returns details for a single sale phase.
     * Retrieve sale phase
     */
    async retrieveSalePhase(requestParameters: RetrieveSalePhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveSalePhaseResponse> {
        const response = await this.retrieveSalePhaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of sale phases for a given collection. The response is paginated. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next set of sale phases. 
     * List sale phases
     */
    async retrieveSalePhasesRaw(requestParameters: RetrieveSalePhasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSalePhasesResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling retrieveSalePhases.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveSalePhases.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSalePhasesResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of sale phases for a given collection. The response is paginated. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next set of sale phases. 
     * List sale phases
     */
    async retrieveSalePhases(requestParameters: RetrieveSalePhasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSalePhasesResponse> {
        const response = await this.retrieveSalePhasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update affiliate.
     * Update affiliate
     */
    async updateAffiliateRaw(requestParameters: UpdateAffiliateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveSalePhaseResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateAffiliate.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling updateAffiliate.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling updateAffiliate.');
        }

        if (requestParameters.affiliateId === null || requestParameters.affiliateId === undefined) {
            throw new runtime.RequiredError('affiliateId','Required parameter requestParameters.affiliateId was null or undefined when calling updateAffiliate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases/{phase_id}/affiliates/{affiliate_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"phase_id"}}`, encodeURIComponent(String(requestParameters.phaseId))).replace(`{${"affiliate_id"}}`, encodeURIComponent(String(requestParameters.affiliateId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAffiliateRequestToJSON(requestParameters.createAffiliateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveSalePhaseResponseFromJSON(jsonValue));
    }

    /**
     * Update affiliate.
     * Update affiliate
     */
    async updateAffiliate(requestParameters: UpdateAffiliateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveSalePhaseResponse> {
        const response = await this.updateAffiliateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update sale phase.
     * Update sale phase
     */
    async updateSalePhaseRaw(requestParameters: UpdateSalePhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveSalePhaseResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateSalePhase.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling updateSalePhase.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling updateSalePhase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/phases/{phase_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"phase_id"}}`, encodeURIComponent(String(requestParameters.phaseId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalePhaseRequestToJSON(requestParameters.createSalePhaseRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveSalePhaseResponseFromJSON(jsonValue));
    }

    /**
     * Update sale phase.
     * Update sale phase
     */
    async updateSalePhase(requestParameters: UpdateSalePhaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveSalePhaseResponse> {
        const response = await this.updateSalePhaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
