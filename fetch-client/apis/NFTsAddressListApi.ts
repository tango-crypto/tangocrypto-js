/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckAddressListRequest,
  CreateAddressListResponse,
  DeleteAddressListResponse,
  GetAddressSummary400Response,
  GetAddressSummary401Response,
  GetAddressSummary403Response,
  GetAddressSummary404Response,
  GetAddressSummary429Response,
  GetAddressSummary500Response,
  ListAdressListResponse,
  RetrieveAddressListResponse,
} from '../models';
import {
    CheckAddressListRequestFromJSON,
    CheckAddressListRequestToJSON,
    CreateAddressListResponseFromJSON,
    CreateAddressListResponseToJSON,
    DeleteAddressListResponseFromJSON,
    DeleteAddressListResponseToJSON,
    GetAddressSummary400ResponseFromJSON,
    GetAddressSummary400ResponseToJSON,
    GetAddressSummary401ResponseFromJSON,
    GetAddressSummary401ResponseToJSON,
    GetAddressSummary403ResponseFromJSON,
    GetAddressSummary403ResponseToJSON,
    GetAddressSummary404ResponseFromJSON,
    GetAddressSummary404ResponseToJSON,
    GetAddressSummary429ResponseFromJSON,
    GetAddressSummary429ResponseToJSON,
    GetAddressSummary500ResponseFromJSON,
    GetAddressSummary500ResponseToJSON,
    ListAdressListResponseFromJSON,
    ListAdressListResponseToJSON,
    RetrieveAddressListResponseFromJSON,
    RetrieveAddressListResponseToJSON,
} from '../models';

export interface CheckAddressListOperationRequest {
    appId: string;
    addressListId: string;
    checkAddressListRequest?: CheckAddressListRequest;
}

export interface CreateAddressListRequest {
    appId: string;
    name: string;
    file: Blob;
    description?: string;
}

export interface DeleteAddressListRequest {
    appId: string;
    addressListId: string;
}

export interface GetAddressListsRequest {
    appId: string;
    cursor?: string;
}

export interface RetrieveAddressListRequest {
    appId: string;
    addressListId: string;
}

/**
 * 
 */
export class NFTsAddressListApi extends runtime.BaseAPI {

    /**
     * Returns `true` if the address is included in the address list, `false` if not.
     * Check address
     */
    async checkAddressListRaw(requestParameters: CheckAddressListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling checkAddressList.');
        }

        if (requestParameters.addressListId === null || requestParameters.addressListId === undefined) {
            throw new runtime.RequiredError('addressListId','Required parameter requestParameters.addressListId was null or undefined when calling checkAddressList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/address-lists/{address_list_id}/includes`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"address_list_id"}}`, encodeURIComponent(String(requestParameters.addressListId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckAddressListRequestToJSON(requestParameters.checkAddressListRequest),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns `true` if the address is included in the address list, `false` if not.
     * Check address
     */
    async checkAddressList(requestParameters: CheckAddressListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkAddressListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new address list in your Tangocrypto account.
     * Create address list
     */
    async createAddressListRaw(requestParameters: CreateAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAddressListResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createAddressList.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createAddressList.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling createAddressList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/address-lists`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAddressListResponseFromJSON(jsonValue));
    }

    /**
     * Create a new address list in your Tangocrypto account.
     * Create address list
     */
    async createAddressList(requestParameters: CreateAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAddressListResponse> {
        const response = await this.createAddressListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an address list in your Tangocrypto account.
     * Delete address list
     */
    async deleteAddressListRaw(requestParameters: DeleteAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAddressListResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteAddressList.');
        }

        if (requestParameters.addressListId === null || requestParameters.addressListId === undefined) {
            throw new runtime.RequiredError('addressListId','Required parameter requestParameters.addressListId was null or undefined when calling deleteAddressList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/address-lists/{address_list_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"address_list_id"}}`, encodeURIComponent(String(requestParameters.addressListId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAddressListResponseFromJSON(jsonValue));
    }

    /**
     * Delete an address list in your Tangocrypto account.
     * Delete address list
     */
    async deleteAddressList(requestParameters: DeleteAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAddressListResponse> {
        const response = await this.deleteAddressListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of address lists. The response is paginated to make the result set easier to handle. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next batch of NFTs. To learn more about how pagination works, visit https://docs.tangocrypto.com/rest-api/pagination 
     * List Address lists
     */
    async getAddressListsRaw(requestParameters: GetAddressListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAdressListResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getAddressLists.');
        }

        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/address-lists`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAdressListResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of address lists. The response is paginated to make the result set easier to handle. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next batch of NFTs. To learn more about how pagination works, visit https://docs.tangocrypto.com/rest-api/pagination 
     * List Address lists
     */
    async getAddressLists(requestParameters: GetAddressListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAdressListResponse> {
        const response = await this.getAddressListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details for a single NFT.
     * Retrieve an address list
     */
    async retrieveAddressListRaw(requestParameters: RetrieveAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveAddressListResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling retrieveAddressList.');
        }

        if (requestParameters.addressListId === null || requestParameters.addressListId === undefined) {
            throw new runtime.RequiredError('addressListId','Required parameter requestParameters.addressListId was null or undefined when calling retrieveAddressList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/address-lists/{address_list_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"address_list_id"}}`, encodeURIComponent(String(requestParameters.addressListId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveAddressListResponseFromJSON(jsonValue));
    }

    /**
     * Returns details for a single NFT.
     * Retrieve an address list
     */
    async retrieveAddressList(requestParameters: RetrieveAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveAddressListResponse> {
        const response = await this.retrieveAddressListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
