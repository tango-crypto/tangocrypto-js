/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateCollectionResponseRoyalty } from './CreateCollectionResponseRoyalty';
import {
    CreateCollectionResponseRoyaltyFromJSON,
    CreateCollectionResponseRoyaltyFromJSONTyped,
    CreateCollectionResponseRoyaltyToJSON,
} from './CreateCollectionResponseRoyalty';
import type { NftCollectionMetadata } from './NftCollectionMetadata';
import {
    NftCollectionMetadataFromJSON,
    NftCollectionMetadataFromJSONTyped,
    NftCollectionMetadataToJSON,
} from './NftCollectionMetadata';
import type { NftCollectionPolicy } from './NftCollectionPolicy';
import {
    NftCollectionPolicyFromJSON,
    NftCollectionPolicyFromJSONTyped,
    NftCollectionPolicyToJSON,
} from './NftCollectionPolicy';

/**
 * NFT Collection
 * @export
 * @interface CreateCollectionResponse
 */
export interface CreateCollectionResponse {
    /**
     * Collection ID.
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    id?: string;
    /**
     * Collection name.
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    name?: string;
    /**
     * URL of the website where the collection is going to be sold.
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    url?: string;
    /**
     * Collection description. The collection description is internal to your Tangocrypto account.
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    description?: string;
    /**
     * Wallet address that is going to receive the payments of the NFT sale.
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    payoutAddress?: string;
    /**
     * Amount of tokens in the collection.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    tokenCount?: number;
    /**
     * Amount of tokens for sale.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    tokenForSaleCount?: number;
    /**
     * Amount of tokens sold.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    tokenSoldCount?: number;
    /**
     * The total amount of ADA generated by the sale of NFTs in the collection. This number represents gross sales; it doesn't include any fee deduction.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    revenue?: number;
    /**
     * The total amount of ADA generated by the sale of NFTs that goest to the seller.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    income?: number;
    /**
     * Tangocrypto service fee. This fee depends on your plan and the number of NFTs minted. Check the price page to get more information about it.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    serviceFee?: number;
    /**
     * Amount of ADA spent to send the NFTs to the buyer's wallets.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    nftFee?: number;
    /**
     * Transaction fees.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    txFee?: number;
    /**
     * Amount of ADA spent in fees. This includes transaction fees, nft fees and the service fees.
     * @type {number}
     * @memberof CreateCollectionResponse
     */
    totalFees?: number;
    /**
     * 
     * @type {NftCollectionPolicy}
     * @memberof CreateCollectionResponse
     */
    policy?: NftCollectionPolicy;
    /**
     * 
     * @type {NftCollectionMetadata}
     * @memberof CreateCollectionResponse
     */
    metadata?: NftCollectionMetadata;
    /**
     * 
     * @type {CreateCollectionResponseRoyalty}
     * @memberof CreateCollectionResponse
     */
    royalty?: CreateCollectionResponseRoyalty;
    /**
     * Creation datetime in ISO 8601 format.
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    createdAt?: string;
    /**
     * Update datetime in ISO 8601 format.
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    updatedAt?: string;
}

/**
 * Check if a given object implements the CreateCollectionResponse interface.
 */
export function instanceOfCreateCollectionResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreateCollectionResponseFromJSON(json: any): CreateCollectionResponse {
    return CreateCollectionResponseFromJSONTyped(json, false);
}

export function CreateCollectionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCollectionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'payoutAddress': !exists(json, 'payout_address') ? undefined : json['payout_address'],
        'tokenCount': !exists(json, 'token_count') ? undefined : json['token_count'],
        'tokenForSaleCount': !exists(json, 'token_for_sale_count') ? undefined : json['token_for_sale_count'],
        'tokenSoldCount': !exists(json, 'token_sold_count') ? undefined : json['token_sold_count'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
        'income': !exists(json, 'income') ? undefined : json['income'],
        'serviceFee': !exists(json, 'service_fee') ? undefined : json['service_fee'],
        'nftFee': !exists(json, 'nft_fee') ? undefined : json['nft_fee'],
        'txFee': !exists(json, 'tx_fee') ? undefined : json['tx_fee'],
        'totalFees': !exists(json, 'total_fees') ? undefined : json['total_fees'],
        'policy': !exists(json, 'policy') ? undefined : NftCollectionPolicyFromJSON(json['policy']),
        'metadata': !exists(json, 'metadata') ? undefined : NftCollectionMetadataFromJSON(json['metadata']),
        'royalty': !exists(json, 'royalty') ? undefined : CreateCollectionResponseRoyaltyFromJSON(json['royalty']),
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
    };
}

export function CreateCollectionResponseToJSON(value?: CreateCollectionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'url': value.url,
        'description': value.description,
        'payout_address': value.payoutAddress,
        'token_count': value.tokenCount,
        'token_for_sale_count': value.tokenForSaleCount,
        'token_sold_count': value.tokenSoldCount,
        'revenue': value.revenue,
        'income': value.income,
        'service_fee': value.serviceFee,
        'nft_fee': value.nftFee,
        'tx_fee': value.txFee,
        'total_fees': value.totalFees,
        'policy': NftCollectionPolicyToJSON(value.policy),
        'metadata': NftCollectionMetadataToJSON(value.metadata),
        'royalty': CreateCollectionResponseRoyaltyToJSON(value.royalty),
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
    };
}

