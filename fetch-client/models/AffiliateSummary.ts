/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AffiliateSummary
 */
export interface AffiliateSummary {
    /**
     * Affiliate id
     * @type {string}
     * @memberof AffiliateSummary
     */
    id?: string;
    /**
     * Affiliate name. Used to identify the affiliate.
     * @type {string}
     * @memberof AffiliateSummary
     */
    name?: string;
    /**
     * The value is `true` if the affiliate is active and `false` if it is not.
     * @type {boolean}
     * @memberof AffiliateSummary
     */
    active?: boolean;
    /**
     * If set to `true`, the funds are transferred automatically to the affiliate every time a customer purchases an NFT.
     * @type {boolean}
     * @memberof AffiliateSummary
     */
    automaticPayout?: boolean;
    /**
     * The wallet address of the affiliate. The revenue made from the affiliate sales goes to this address.
     * @type {string}
     * @memberof AffiliateSummary
     */
    address?: string;
    /**
     * The total amount of ADA generated by the sale. This number represents gross sales; it doesn't include any fee deduction.
     * @type {number}
     * @memberof AffiliateSummary
     */
    revenue?: number;
    /**
     * Income made by the affiliate from the sale. This is the amount of Ada (in Lovelaces) that goes to the affiliate wallet. For example, if the affiliate sells a package of 4 NFTs for 40 Ada and the commission rate is 20% the income will be 8000000 Lovelaces.
     * @type {number}
     * @memberof AffiliateSummary
     */
    income?: number;
    /**
     * Commission rate made by the affiliate. If the `commision_type` is `flat` here, you have to specify the commission in Lovelaces. If the commission_type is set to `percentage`, then here you type the percentage. For example, 0.2 represents 20%.
     * @type {number}
     * @memberof AffiliateSummary
     */
    commission?: number;
    /**
     * There are two types of commission types, `fla`t and `percentage`. Use `flat` commission if you want to pay a flat rate on every sale. For example, if the affiliate link leads to a sale of 5 NFTs for 100 Ada and the commission is set to 10 Ada, the affiliate will receive 10 Ada. Use percentage commission if you want to pay a percentage on every sale; for example, if the affiliate link leads to a sale of 5 NFTs for 100 Ada and the 1commission1 is set to 20% the affiliate will receive 20 Ada.
     * @type {string}
     * @memberof AffiliateSummary
     */
    commissionType?: string;
    /**
     * Amount of sales made by the affiliate.
     * @type {number}
     * @memberof AffiliateSummary
     */
    saleCount?: number;
}

/**
 * Check if a given object implements the AffiliateSummary interface.
 */
export function instanceOfAffiliateSummary(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AffiliateSummaryFromJSON(json: any): AffiliateSummary {
    return AffiliateSummaryFromJSONTyped(json, false);
}

export function AffiliateSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): AffiliateSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'automaticPayout': !exists(json, 'automatic_payout') ? undefined : json['automatic_payout'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
        'income': !exists(json, 'income') ? undefined : json['income'],
        'commission': !exists(json, 'commission') ? undefined : json['commission'],
        'commissionType': !exists(json, 'commission_type') ? undefined : json['commission_type'],
        'saleCount': !exists(json, 'sale_count') ? undefined : json['sale_count'],
    };
}

export function AffiliateSummaryToJSON(value?: AffiliateSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'active': value.active,
        'automatic_payout': value.automaticPayout,
        'address': value.address,
        'revenue': value.revenue,
        'income': value.income,
        'commission': value.commission,
        'commission_type': value.commissionType,
        'sale_count': value.saleCount,
    };
}

