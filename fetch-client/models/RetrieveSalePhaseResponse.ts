/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AffiliateSummary } from './AffiliateSummary';
import {
    AffiliateSummaryFromJSON,
    AffiliateSummaryFromJSONTyped,
    AffiliateSummaryToJSON,
} from './AffiliateSummary';
import type { PriceTierItem } from './PriceTierItem';
import {
    PriceTierItemFromJSON,
    PriceTierItemFromJSONTyped,
    PriceTierItemToJSON,
} from './PriceTierItem';

/**
 * 
 * @export
 * @interface RetrieveSalePhaseResponse
 */
export interface RetrieveSalePhaseResponse {
    /**
     * Sales phase ID.
     * @type {string}
     * @memberof RetrieveSalePhaseResponse
     */
    id?: string;
    /**
     * <br /> `fixed` for selling a particular token or token list identified by the token-id on each token. 
     * <br /> `random` for random sales, it will pick random tokens from the collection.
     * @type {string}
     * @memberof RetrieveSalePhaseResponse
     */
    type?: string;
    /**
     * True if the sale phase is active, false if is not active.
     * @type {boolean}
     * @memberof RetrieveSalePhaseResponse
     */
    active?: boolean;
    /**
     * Reservation time in seconds. This timer defines how long an NFT will be reserved once a potential buyer starts the buying process. During this time interval, the NFT won't be available for sale. No other buyer will be able to create a new reservation. If the payment is not received and this timer expires, then the NFT is ready for sale again, and it can be reserved by another buyer.
     * @type {string}
     * @memberof RetrieveSalePhaseResponse
     */
    reservationTime?: string;
    /**
     * Total amount of tokens for sell in the phase.
     * @type {string}
     * @memberof RetrieveSalePhaseResponse
     */
    totalTokens?: string;
    /**
     * Remaining tokens for sale.
     * @type {string}
     * @memberof RetrieveSalePhaseResponse
     */
    remainingTokens?: string;
    /**
     * 
     * @type {Array<PriceTierItem>}
     * @memberof RetrieveSalePhaseResponse
     */
    priceTiers?: Array<PriceTierItem>;
    /**
     * Affiliate summary data. This array is shown only if the sale phase has an affiliate program (optional).
     * @type {Array<AffiliateSummary>}
     * @memberof RetrieveSalePhaseResponse
     */
    affiliates?: Array<AffiliateSummary>;
    /**
     * Creation datetime in ISO 8601 format.
     * @type {string}
     * @memberof RetrieveSalePhaseResponse
     */
    createdAt?: string;
    /**
     * Update datetime in ISO 8601 format.
     * @type {string}
     * @memberof RetrieveSalePhaseResponse
     */
    updatedAt?: string;
}

/**
 * Check if a given object implements the RetrieveSalePhaseResponse interface.
 */
export function instanceOfRetrieveSalePhaseResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RetrieveSalePhaseResponseFromJSON(json: any): RetrieveSalePhaseResponse {
    return RetrieveSalePhaseResponseFromJSONTyped(json, false);
}

export function RetrieveSalePhaseResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RetrieveSalePhaseResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'reservationTime': !exists(json, 'reservation_time') ? undefined : json['reservation_time'],
        'totalTokens': !exists(json, 'total_tokens') ? undefined : json['total_tokens'],
        'remainingTokens': !exists(json, 'remaining_tokens') ? undefined : json['remaining_tokens'],
        'priceTiers': !exists(json, 'price_tiers') ? undefined : ((json['price_tiers'] as Array<any>).map(PriceTierItemFromJSON)),
        'affiliates': !exists(json, 'affiliates') ? undefined : ((json['affiliates'] as Array<any>).map(AffiliateSummaryFromJSON)),
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
    };
}

export function RetrieveSalePhaseResponseToJSON(value?: RetrieveSalePhaseResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'active': value.active,
        'reservation_time': value.reservationTime,
        'total_tokens': value.totalTokens,
        'remaining_tokens': value.remainingTokens,
        'price_tiers': value.priceTiers === undefined ? undefined : ((value.priceTiers as Array<any>).map(PriceTierItemToJSON)),
        'affiliates': value.affiliates === undefined ? undefined : ((value.affiliates as Array<any>).map(AffiliateSummaryToJSON)),
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
    };
}

