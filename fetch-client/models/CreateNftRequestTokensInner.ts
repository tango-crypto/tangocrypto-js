/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateNftRequestTokensInnerImage } from './CreateNftRequestTokensInnerImage';
import {
    CreateNftRequestTokensInnerImageFromJSON,
    CreateNftRequestTokensInnerImageFromJSONTyped,
    CreateNftRequestTokensInnerImageToJSON,
} from './CreateNftRequestTokensInnerImage';
import type { CreateNftRequestTokensInnerMetadataAttributesInner } from './CreateNftRequestTokensInnerMetadataAttributesInner';
import {
    CreateNftRequestTokensInnerMetadataAttributesInnerFromJSON,
    CreateNftRequestTokensInnerMetadataAttributesInnerFromJSONTyped,
    CreateNftRequestTokensInnerMetadataAttributesInnerToJSON,
} from './CreateNftRequestTokensInnerMetadataAttributesInner';

/**
 * 
 * @export
 * @interface CreateNftRequestTokensInner
 */
export interface CreateNftRequestTokensInner {
    /**
     * Asset name. Take into consideration is the name is case sensitive and is between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
     * @type {string}
     * @memberof CreateNftRequestTokensInner
     */
    assetName: string;
    /**
     * Display name. Between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
     * @type {string}
     * @memberof CreateNftRequestTokensInner
     */
    name: string;
    /**
     * Token description. Between 2 and 32 characters (maximum 64 bytes for UTF-8 encoded).
     * @type {string}
     * @memberof CreateNftRequestTokensInner
     */
    description?: string;
    /**
     * (Optional) Individual NFT price in Lovelace (1 ADA = 1000000 Lovelace). This parameter is used for flash minting when you don't want to create Sale Phases or Sales and want to make a quick sale.
     * @type {number}
     * @memberof CreateNftRequestTokensInner
     */
    price?: number;
    /**
     * Media type. For example you can use `image/jpeg`, `image/png`, `image/gif`, `video/mp4`.
     * @type {string}
     * @memberof CreateNftRequestTokensInner
     */
    mediaType?: string;
    /**
     * 
     * @type {CreateNftRequestTokensInnerImage}
     * @memberof CreateNftRequestTokensInner
     */
    image: CreateNftRequestTokensInnerImage;
    /**
     * You have to specify the values for the tag attributes for every token as defined in the collection attribute tag definition when you create the collection. Please take into consideration that we have to define these values for every single NFT in the collection. For example, we set the colour, body, eyes, face and mime type for that particular NFT.For more details about Metadata have a look at the CIP (https://cips.cardano.org/cips/cip25/)
     * @type {Array<CreateNftRequestTokensInnerMetadataAttributesInner>}
     * @memberof CreateNftRequestTokensInner
     */
    metadataAttributes?: Array<CreateNftRequestTokensInnerMetadataAttributesInner>;
    /**
     * Here you can set any arbitrary attributes that you didn't include in the collection attributes tag definition. Use `"key":"value"` pairs to define unique attributes for each NFT.
     * @type {object}
     * @memberof CreateNftRequestTokensInner
     */
    customAttributes?: object;
}

/**
 * Check if a given object implements the CreateNftRequestTokensInner interface.
 */
export function instanceOfCreateNftRequestTokensInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "assetName" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "image" in value;

    return isInstance;
}

export function CreateNftRequestTokensInnerFromJSON(json: any): CreateNftRequestTokensInner {
    return CreateNftRequestTokensInnerFromJSONTyped(json, false);
}

export function CreateNftRequestTokensInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateNftRequestTokensInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assetName': json['asset_name'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'mediaType': !exists(json, 'media_type') ? undefined : json['media_type'],
        'image': CreateNftRequestTokensInnerImageFromJSON(json['image']),
        'metadataAttributes': !exists(json, 'metadata_attributes') ? undefined : ((json['metadata_attributes'] as Array<any>).map(CreateNftRequestTokensInnerMetadataAttributesInnerFromJSON)),
        'customAttributes': !exists(json, 'custom_attributes') ? undefined : json['custom_attributes'],
    };
}

export function CreateNftRequestTokensInnerToJSON(value?: CreateNftRequestTokensInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'asset_name': value.assetName,
        'name': value.name,
        'description': value.description,
        'price': value.price,
        'media_type': value.mediaType,
        'image': CreateNftRequestTokensInnerImageToJSON(value.image),
        'metadata_attributes': value.metadataAttributes === undefined ? undefined : ((value.metadataAttributes as Array<any>).map(CreateNftRequestTokensInnerMetadataAttributesInnerToJSON)),
        'custom_attributes': value.customAttributes,
    };
}

