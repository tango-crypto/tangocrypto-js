/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RetrieveBlockResponse
 */
export interface RetrieveBlockResponse {
    /**
     * The hash identifier of the block.
     * @type {string}
     * @memberof RetrieveBlockResponse
     */
    hash?: string;
    /**
     * The epoch number.
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    epochNo?: number;
    /**
     * The slot number.
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    slotNo?: number;
    /**
     * The slot number within an epoch (resets to zero at the start of each epoch).
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    epochSlotNo?: number;
    /**
     * Block number.
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    blockNo?: number;
    /**
     * Number of the previous block.
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    previousBlock?: number;
    /**
     * Number of the next block.
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    nextBlock?: number;
    /**
     * Bech32 ID of the slot leader (ie an entity that mines a block).
     * @type {string}
     * @memberof RetrieveBlockResponse
     */
    slotLeader?: string;
    /**
     * Total output within the block (in Lovelace).
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    outSum?: number;
    /**
     * Total fees within the block (in Lovelace).
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    fees?: number;
    /**
     * Number of block confirmations.
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    confirmations?: number;
    /**
     * The block size (in bytes).
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    size?: number;
    /**
     * Block creation time in ISO 8601 format
     * @type {string}
     * @memberof RetrieveBlockResponse
     */
    time?: string;
    /**
     * Number of transactions in the block.
     * @type {number}
     * @memberof RetrieveBlockResponse
     */
    txCount?: number;
    /**
     * The VRF key of the creator of this block.
     * @type {string}
     * @memberof RetrieveBlockResponse
     */
    vrfKey?: string;
    /**
     * The hash of the operational certificate of the block producer.
     * @type {string}
     * @memberof RetrieveBlockResponse
     */
    opCert?: string;
}

/**
 * Check if a given object implements the RetrieveBlockResponse interface.
 */
export function instanceOfRetrieveBlockResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RetrieveBlockResponseFromJSON(json: any): RetrieveBlockResponse {
    return RetrieveBlockResponseFromJSONTyped(json, false);
}

export function RetrieveBlockResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RetrieveBlockResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'epochNo': !exists(json, 'epoch_no') ? undefined : json['epoch_no'],
        'slotNo': !exists(json, 'slot_no') ? undefined : json['slot_no'],
        'epochSlotNo': !exists(json, 'epoch_slot_no') ? undefined : json['epoch_slot_no'],
        'blockNo': !exists(json, 'block_no') ? undefined : json['block_no'],
        'previousBlock': !exists(json, 'previous_block') ? undefined : json['previous_block'],
        'nextBlock': !exists(json, 'next_block') ? undefined : json['next_block'],
        'slotLeader': !exists(json, 'slot_leader') ? undefined : json['slot_leader'],
        'outSum': !exists(json, 'out_sum') ? undefined : json['out_sum'],
        'fees': !exists(json, 'fees') ? undefined : json['fees'],
        'confirmations': !exists(json, 'confirmations') ? undefined : json['confirmations'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'time': !exists(json, 'time') ? undefined : json['time'],
        'txCount': !exists(json, 'tx_count') ? undefined : json['tx_count'],
        'vrfKey': !exists(json, 'vrf_key') ? undefined : json['vrf_key'],
        'opCert': !exists(json, 'op_cert') ? undefined : json['op_cert'],
    };
}

export function RetrieveBlockResponseToJSON(value?: RetrieveBlockResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hash': value.hash,
        'epoch_no': value.epochNo,
        'slot_no': value.slotNo,
        'epoch_slot_no': value.epochSlotNo,
        'block_no': value.blockNo,
        'previous_block': value.previousBlock,
        'next_block': value.nextBlock,
        'slot_leader': value.slotLeader,
        'out_sum': value.outSum,
        'fees': value.fees,
        'confirmations': value.confirmations,
        'size': value.size,
        'time': value.time,
        'tx_count': value.txCount,
        'vrf_key': value.vrfKey,
        'op_cert': value.opCert,
    };
}

