/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateNftSaleRequest
 */
export interface CreateNftSaleRequest {
    /**
     * <br /> Use `fixed` for selling a particular token or token list identified by the token-id. 
     * <br /> Use `random` for random sales, it will pick random tokens from the collection.'
     * @type {string}
     * @memberof CreateNftSaleRequest
     */
    type: CreateNftSaleRequestTypeEnum;
    /**
     * Individual NFT price in Lovelace (1 ADA = 1000000 Lovelace).
     * @type {number}
     * @memberof CreateNftSaleRequest
     */
    price: number;
    /**
     * Reservation time in *seconds*. This timer defines how long an NFT will be reserved once a potential buyer starts the buying process. During this time interval, the NFT won't be available for sale. No other buyer will be able to create a new reservation. If the payment is not received and this timer expires, the NFT will be ready for sale again, and another buyer can reserve it.
     * @type {number}
     * @memberof CreateNftSaleRequest
     */
    reservationTime: number;
    /**
     * An array of the token ids of the NFTs you want to sell. This field is required only for `fixed` sales. If you use `ramdom` sale you should omit this field.
     * @type {Array<string>}
     * @memberof CreateNftSaleRequest
     */
    tokens?: Array<string>;
    /**
     * Amount of tokens to sell.
     * @type {number}
     * @memberof CreateNftSaleRequest
     */
    quantity?: number;
}


/**
 * @export
 */
export const CreateNftSaleRequestTypeEnum = {
    Fixed: 'fixed',
    Random: 'random'
} as const;
export type CreateNftSaleRequestTypeEnum = typeof CreateNftSaleRequestTypeEnum[keyof typeof CreateNftSaleRequestTypeEnum];


/**
 * Check if a given object implements the CreateNftSaleRequest interface.
 */
export function instanceOfCreateNftSaleRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "reservationTime" in value;

    return isInstance;
}

export function CreateNftSaleRequestFromJSON(json: any): CreateNftSaleRequest {
    return CreateNftSaleRequestFromJSONTyped(json, false);
}

export function CreateNftSaleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateNftSaleRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'price': json['price'],
        'reservationTime': json['reservation_time'],
        'tokens': !exists(json, 'tokens') ? undefined : json['tokens'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
    };
}

export function CreateNftSaleRequestToJSON(value?: CreateNftSaleRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'price': value.price,
        'reservation_time': value.reservationTime,
        'tokens': value.tokens,
        'quantity': value.quantity,
    };
}

