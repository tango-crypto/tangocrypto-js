/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Policy configuration for every NFT in the collection. When you create a new collection we do several steps in the background; we create a new key pair (*public verification key/private signing key*), a *policy script* and the *policy id*. Then during the sale process, all the tokens are minted with the same *policy script* and the *policy id* is attached permanently to the NFT. 
 * @export
 * @interface CreateCollectionRequestPolicy
 */
export interface CreateCollectionRequestPolicy {
    /**
     * Defines if the policy will be locked or not. If you select `false` then you are not required to chose a date and time to lock the policy, therefore the policy will be open and you can be minting NFTs under this policy forever. If you set this parameter to `true` then you have to specify a `locktime` date.
     * @type {boolean}
     * @memberof CreateCollectionRequestPolicy
     */
    lock: CreateCollectionRequestPolicyLockEnum;
    /**
     * Locktime date in ISO 8601 format `yyyy-mm-ddThh:mm:ss[.mmm]`. It defines how long you'll be able to mint NFTs for the collection. The policy will lock after that date, and you won't be able to mint more NFTs using the same policy id (even if you use the same key). Hours and minutes are optional; if you set it to `2022-02-24`, it will automatically fill it with 0s, for example, `2022-02-24T00:00:00.000Z`. Take into consideration the desirability and size of your collection before setting this date and leave enough time for selling the NFTs. There is no limited time for the future.
     * @type {string}
     * @memberof CreateCollectionRequestPolicy
     */
    lockTime?: string;
}


/**
 * @export
 */
export const CreateCollectionRequestPolicyLockEnum = {
    True: true,
    False: false
} as const;
export type CreateCollectionRequestPolicyLockEnum = typeof CreateCollectionRequestPolicyLockEnum[keyof typeof CreateCollectionRequestPolicyLockEnum];


/**
 * Check if a given object implements the CreateCollectionRequestPolicy interface.
 */
export function instanceOfCreateCollectionRequestPolicy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "lock" in value;

    return isInstance;
}

export function CreateCollectionRequestPolicyFromJSON(json: any): CreateCollectionRequestPolicy {
    return CreateCollectionRequestPolicyFromJSONTyped(json, false);
}

export function CreateCollectionRequestPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCollectionRequestPolicy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'lock': json['lock'],
        'lockTime': !exists(json, 'lock_time') ? undefined : json['lock_time'],
    };
}

export function CreateCollectionRequestPolicyToJSON(value?: CreateCollectionRequestPolicy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'lock': value.lock,
        'lock_time': value.lockTime,
    };
}

