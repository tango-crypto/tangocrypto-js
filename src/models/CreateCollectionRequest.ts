/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateCollectionRequestMetadata } from './CreateCollectionRequestMetadata';
import {
    CreateCollectionRequestMetadataFromJSON,
    CreateCollectionRequestMetadataFromJSONTyped,
    CreateCollectionRequestMetadataToJSON,
} from './CreateCollectionRequestMetadata';
import type { CreateCollectionRequestPayoutAddress } from './CreateCollectionRequestPayoutAddress';
import {
    CreateCollectionRequestPayoutAddressFromJSON,
    CreateCollectionRequestPayoutAddressFromJSONTyped,
    CreateCollectionRequestPayoutAddressToJSON,
} from './CreateCollectionRequestPayoutAddress';
import type { CreateCollectionRequestPolicy } from './CreateCollectionRequestPolicy';
import {
    CreateCollectionRequestPolicyFromJSON,
    CreateCollectionRequestPolicyFromJSONTyped,
    CreateCollectionRequestPolicyToJSON,
} from './CreateCollectionRequestPolicy';
import type { CreateCollectionRequestRoyalty } from './CreateCollectionRequestRoyalty';
import {
    CreateCollectionRequestRoyaltyFromJSON,
    CreateCollectionRequestRoyaltyFromJSONTyped,
    CreateCollectionRequestRoyaltyToJSON,
} from './CreateCollectionRequestRoyalty';

/**
 * Create NFT Collection request
 * @export
 * @interface CreateCollectionRequest
 */
export interface CreateCollectionRequest {
    /**
     * Collection name. The collection name is internal to your Tangocrypto account. This is just a way to identify different collections.
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    name: string;
    /**
     * Collection description. The collection description is internal to your Tangocrypto account.
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    description?: string;
    /**
     * URL of the website where the collection is going to be sold.
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    url?: string;
    /**
     * 
     * @type {CreateCollectionRequestPayoutAddress}
     * @memberof CreateCollectionRequest
     */
    payoutAddress: CreateCollectionRequestPayoutAddress;
    /**
     * Reservation time in seconds. This timer defines how long an NFT will be reserved once a potential buyer starts the buying process. During this time interval, the NFT won't be available for sale. No other buyer will be able to create a new reservation. If the payment is not received and this timer expires, then the NFT is ready for sale again, and it can be reserved by another buyer.
     * @type {number}
     * @memberof CreateCollectionRequest
     */
    reservationTime?: number;
    /**
     * 
     * @type {CreateCollectionRequestPolicy}
     * @memberof CreateCollectionRequest
     */
    policy: CreateCollectionRequestPolicy;
    /**
     * 
     * @type {CreateCollectionRequestMetadata}
     * @memberof CreateCollectionRequest
     */
    metadata?: CreateCollectionRequestMetadata;
    /**
     * 
     * @type {CreateCollectionRequestRoyalty}
     * @memberof CreateCollectionRequest
     */
    royalty?: CreateCollectionRequestRoyalty;
}

/**
 * Check if a given object implements the CreateCollectionRequest interface.
 */
export function instanceOfCreateCollectionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "payoutAddress" in value;
    isInstance = isInstance && "policy" in value;

    return isInstance;
}

export function CreateCollectionRequestFromJSON(json: any): CreateCollectionRequest {
    return CreateCollectionRequestFromJSONTyped(json, false);
}

export function CreateCollectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCollectionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'payoutAddress': CreateCollectionRequestPayoutAddressFromJSON(json['payout_address']),
        'reservationTime': !exists(json, 'reservation_time') ? undefined : json['reservation_time'],
        'policy': CreateCollectionRequestPolicyFromJSON(json['policy']),
        'metadata': !exists(json, 'metadata') ? undefined : CreateCollectionRequestMetadataFromJSON(json['metadata']),
        'royalty': !exists(json, 'royalty') ? undefined : CreateCollectionRequestRoyaltyFromJSON(json['royalty']),
    };
}

export function CreateCollectionRequestToJSON(value?: CreateCollectionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'url': value.url,
        'payout_address': CreateCollectionRequestPayoutAddressToJSON(value.payoutAddress),
        'reservation_time': value.reservationTime,
        'policy': CreateCollectionRequestPolicyToJSON(value.policy),
        'metadata': CreateCollectionRequestMetadataToJSON(value.metadata),
        'royalty': CreateCollectionRequestRoyaltyToJSON(value.royalty),
    };
}

