/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNftRequest,
  CreateNftResponse,
  DeleteNftResponse,
  GetAddressSummary400Response,
  GetAddressSummary401Response,
  GetAddressSummary403Response,
  GetAddressSummary404Response,
  GetAddressSummary429Response,
  GetAddressSummary500Response,
  NftToken,
  UpdateNftRequest,
} from '../models';
import {
    CreateNftRequestFromJSON,
    CreateNftRequestToJSON,
    CreateNftResponseFromJSON,
    CreateNftResponseToJSON,
    DeleteNftResponseFromJSON,
    DeleteNftResponseToJSON,
    GetAddressSummary400ResponseFromJSON,
    GetAddressSummary400ResponseToJSON,
    GetAddressSummary401ResponseFromJSON,
    GetAddressSummary401ResponseToJSON,
    GetAddressSummary403ResponseFromJSON,
    GetAddressSummary403ResponseToJSON,
    GetAddressSummary404ResponseFromJSON,
    GetAddressSummary404ResponseToJSON,
    GetAddressSummary429ResponseFromJSON,
    GetAddressSummary429ResponseToJSON,
    GetAddressSummary500ResponseFromJSON,
    GetAddressSummary500ResponseToJSON,
    NftTokenFromJSON,
    NftTokenToJSON,
    UpdateNftRequestFromJSON,
    UpdateNftRequestToJSON,
} from '../models';

export interface DeleteNftRequest {
    appId: string;
    collectionId: string;
    tokenId: string;
}

export interface NftCreateNftRequest {
    appId: string;
    collectionId: string;
    createNftRequest?: CreateNftRequest;
}

export interface RetrieveNFTRequest {
    appId: string;
    collectionId: string;
    tokenId: string;
}

export interface UpdateNFTRequest {
    appId: string;
    collectionId: string;
    tokenId: string;
    updateNftRequest?: UpdateNftRequest;
}

/**
 * 
 */
export class NFTsTokensApi extends runtime.BaseAPI {

    /**
     * Delete an NFT in your Tangocrypto account.
     * Delete NFT
     */
    async deleteNftRaw(requestParameters: DeleteNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNftResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteNft.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling deleteNft.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling deleteNft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/tokens/{token_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNftResponseFromJSON(jsonValue));
    }

    /**
     * Delete an NFT in your Tangocrypto account.
     * Delete NFT
     */
    async deleteNft(requestParameters: DeleteNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNftResponse> {
        const response = await this.deleteNftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create NFT in a Collection 
     * Create NFT
     */
    async nftCreateNftRaw(requestParameters: NftCreateNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateNftResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling nftCreateNft.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling nftCreateNft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/tokens`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNftRequestToJSON(requestParameters.createNftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNftResponseFromJSON(jsonValue));
    }

    /**
     * Create NFT in a Collection 
     * Create NFT
     */
    async nftCreateNft(requestParameters: NftCreateNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateNftResponse> {
        const response = await this.nftCreateNftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details for a single NFT.
     * Retrieve NFT
     */
    async retrieveNFTRaw(requestParameters: RetrieveNFTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftToken>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling retrieveNFT.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveNFT.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling retrieveNFT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/tokens/{token_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NftTokenFromJSON(jsonValue));
    }

    /**
     * Returns details for a single NFT.
     * Retrieve NFT
     */
    async retrieveNFT(requestParameters: RetrieveNFTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftToken> {
        const response = await this.retrieveNFTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the NFT with the supplied parameters. The ones not provided  remain with the same value.
     * Update NFT
     */
    async updateNFTRaw(requestParameters: UpdateNFTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateNftResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateNFT.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling updateNFT.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling updateNFT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/tokens/{token_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNftRequestToJSON(requestParameters.updateNftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNftResponseFromJSON(jsonValue));
    }

    /**
     * Updates the NFT with the supplied parameters. The ones not provided  remain with the same value.
     * Update NFT
     */
    async updateNFT(requestParameters: UpdateNFTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateNftResponse> {
        const response = await this.updateNFTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
