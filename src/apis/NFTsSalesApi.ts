/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancelNftSaleResponse,
  CreateNftSaleRequest,
  CreateNftSaleResponse,
  GetAddressSummary400Response,
  GetAddressSummary401Response,
  GetAddressSummary403Response,
  GetAddressSummary404Response,
  GetAddressSummary429Response,
  GetAddressSummary500Response,
  ListNftSalesResponse,
  RetrieveNftSaleResponse,
} from '../models';
import {
    CancelNftSaleResponseFromJSON,
    CancelNftSaleResponseToJSON,
    CreateNftSaleRequestFromJSON,
    CreateNftSaleRequestToJSON,
    CreateNftSaleResponseFromJSON,
    CreateNftSaleResponseToJSON,
    GetAddressSummary400ResponseFromJSON,
    GetAddressSummary400ResponseToJSON,
    GetAddressSummary401ResponseFromJSON,
    GetAddressSummary401ResponseToJSON,
    GetAddressSummary403ResponseFromJSON,
    GetAddressSummary403ResponseToJSON,
    GetAddressSummary404ResponseFromJSON,
    GetAddressSummary404ResponseToJSON,
    GetAddressSummary429ResponseFromJSON,
    GetAddressSummary429ResponseToJSON,
    GetAddressSummary500ResponseFromJSON,
    GetAddressSummary500ResponseToJSON,
    ListNftSalesResponseFromJSON,
    ListNftSalesResponseToJSON,
    RetrieveNftSaleResponseFromJSON,
    RetrieveNftSaleResponseToJSON,
} from '../models';

export interface CancelNftSaleRequest {
    appId: string;
    collectionId: string;
    tokenId: string;
    saleId: string;
}

export interface CreateNftSaleOperationRequest {
    appId: string;
    collectionId: string;
    createNftSaleRequest?: CreateNftSaleRequest;
}

export interface ListNftSalesRequest {
    appId: string;
    collectionId: string;
    order?: string;
    size?: number;
    cursor?: string;
}

export interface RetrieveNFTSaleRequest {
    appId: string;
    collectionId: string;
    salesId: string;
}

/**
 * 
 */
export class NFTsSalesApi extends runtime.BaseAPI {

    /**
     * Cancel a sale for a given NFT. When you cancel a sale the status of the NFT will return back to `OPEN`
     * Cancel NFT sale
     */
    async cancelNftSaleRaw(requestParameters: CancelNftSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelNftSaleResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling cancelNftSale.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling cancelNftSale.');
        }

        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling cancelNftSale.');
        }

        if (requestParameters.saleId === null || requestParameters.saleId === undefined) {
            throw new runtime.RequiredError('saleId','Required parameter requestParameters.saleId was null or undefined when calling cancelNftSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/tokens/{token_id}/sales/{sale_id}/cancel`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))).replace(`{${"sale_id"}}`, encodeURIComponent(String(requestParameters.saleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelNftSaleResponseFromJSON(jsonValue));
    }

    /**
     * Cancel a sale for a given NFT. When you cancel a sale the status of the NFT will return back to `OPEN`
     * Cancel NFT sale
     */
    async cancelNftSale(requestParameters: CancelNftSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelNftSaleResponse> {
        const response = await this.cancelNftSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an NFT sale. You can sell multiple tokens in a single sale.
     * Create NFT sale
     */
    async createNftSaleRaw(requestParameters: CreateNftSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateNftSaleResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createNftSale.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling createNftSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/sales`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNftSaleRequestToJSON(requestParameters.createNftSaleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNftSaleResponseFromJSON(jsonValue));
    }

    /**
     * Create an NFT sale. You can sell multiple tokens in a single sale.
     * Create NFT sale
     */
    async createNftSale(requestParameters: CreateNftSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateNftSaleResponse> {
        const response = await this.createNftSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of Sales for a given collection. The response is paginated to make the result set easier to handle. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next batch of NFTs. To learn more about how pagination works, visit https://docs.tangocrypto.com/rest-api/pagination 
     * List NFT sales
     */
    async listNftSalesRaw(requestParameters: ListNftSalesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListNftSalesResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling listNftSales.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling listNftSales.');
        }

        const queryParameters: any = {};

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/sales`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListNftSalesResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of Sales for a given collection. The response is paginated to make the result set easier to handle. If truncated, the response includes a `cursor` that you use in a subsequent request to retrieve the next batch of NFTs. To learn more about how pagination works, visit https://docs.tangocrypto.com/rest-api/pagination 
     * List NFT sales
     */
    async listNftSales(requestParameters: ListNftSalesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListNftSalesResponse> {
        const response = await this.listNftSalesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details for a single NFT sale. With this endpoint, you can check the remaining reservation time or if the sale is expired. Also, you can check if a customer has made a partial payment or if the total amount was paid. Once the payment is received, the NFT is minted and sent to the buyer\'s wallet address.
     * Retrieve NFT Sale
     */
    async retrieveNFTSaleRaw(requestParameters: RetrieveNFTSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveNftSaleResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling retrieveNFTSale.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling retrieveNFTSale.');
        }

        if (requestParameters.salesId === null || requestParameters.salesId === undefined) {
            throw new runtime.RequiredError('salesId','Required parameter requestParameters.salesId was null or undefined when calling retrieveNFTSale.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/nft/collections/{collection_id}/sales/{sales_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"collection_id"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"sales_id"}}`, encodeURIComponent(String(requestParameters.salesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveNftSaleResponseFromJSON(jsonValue));
    }

    /**
     * Returns details for a single NFT sale. With this endpoint, you can check the remaining reservation time or if the sale is expired. Also, you can check if a customer has made a partial payment or if the total amount was paid. Once the payment is received, the NFT is minted and sent to the buyer\'s wallet address.
     * Retrieve NFT Sale
     */
    async retrieveNFTSale(requestParameters: RetrieveNFTSaleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveNftSaleResponse> {
        const response = await this.retrieveNFTSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
