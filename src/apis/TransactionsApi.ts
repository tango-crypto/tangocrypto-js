/* tslint:disable */
/* eslint-disable */
/**
 * Tangocrypto API
 * ## Overview  Tangocrypto API(Application Programing Interface) allows you fast and reliable access to the Cardano network that requires only minutes to integrate.    ## API Key header   When you sign up on https://www.tangocrypto.com and create an App an `x-api-key` is created. You must include the HTTP header `x-api-key` in every request in order to authenticate the API calls.   ## Network and Account ID   You can choose the mainnet or the testnet for your queries. The API requires a valid `app_id` to be included with your request traffic. This identifier should be appended to the request URL.   <table>    <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>    <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.tangocrypto.com/{app_id}/v1</td></tt></tr>    <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.tangocrypto.com/{app_id}/v1</tt></td></tr>  </table>   ## Errors   ### HTTP Status codes   These are the response codes you are going to get when you query Tangocrypto API.   <table>    <tr><td><b>Code</b></td><td><b>Meaning</b></td></tr>    <tr><td><tt><strong>400</strong></tt></td><td><strong>Bad Request</strong> - Your request is invalid. </td></tr>    <tr><td><tt><strong>401</strong></tt></td><td><strong>Unauthorized</strong> - You must authenticate your request with an API key. Check out how to create a key if you do not have one. </td></tr>    <tr><td><tt><strong>403</strong></tt></td><td><strong>Forbidden</strong> - Check you are using the right API KEY, or you\'ve hit your capacity limit, or your request was rejected by your app\'s whitelist settings. </td></tr>    <tr><td><tt><strong>404</strong></tt></td><td><strong>Not found</strong> - Endpoint not found. </td></tr>    <tr><td><tt><strong>429</strong></tt></td><td><strong>Too Many Requests</strong> - You\'ve exceeded your concurrent requests capacity. Check out the Rate Limits page for solutions.</td></tr>    <tr><td><tt><strong>500</strong></tt></td><td><strong>Internal Server Error</strong> - We\'re unable to process your request right now. Get in touch with us if you see this.</td></tr>  </table>  
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@tangocrypto.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BuildTxRequest,
  BuildTxResponse,
  GetAddressSummary400Response,
  GetAddressSummary401Response,
  GetAddressSummary403Response,
  GetAddressSummary404Response,
  GetAddressSummary429Response,
  GetAddressSummary500Response,
  ListTransactionUtxosResponse,
  RetrieveTransactionMetadataResponse,
  RetrieveTransactionResponse,
  SubitTansactionRequest,
  SubitTansactionResponse,
} from '../models';
import {
    BuildTxRequestFromJSON,
    BuildTxRequestToJSON,
    BuildTxResponseFromJSON,
    BuildTxResponseToJSON,
    GetAddressSummary400ResponseFromJSON,
    GetAddressSummary400ResponseToJSON,
    GetAddressSummary401ResponseFromJSON,
    GetAddressSummary401ResponseToJSON,
    GetAddressSummary403ResponseFromJSON,
    GetAddressSummary403ResponseToJSON,
    GetAddressSummary404ResponseFromJSON,
    GetAddressSummary404ResponseToJSON,
    GetAddressSummary429ResponseFromJSON,
    GetAddressSummary429ResponseToJSON,
    GetAddressSummary500ResponseFromJSON,
    GetAddressSummary500ResponseToJSON,
    ListTransactionUtxosResponseFromJSON,
    ListTransactionUtxosResponseToJSON,
    RetrieveTransactionMetadataResponseFromJSON,
    RetrieveTransactionMetadataResponseToJSON,
    RetrieveTransactionResponseFromJSON,
    RetrieveTransactionResponseToJSON,
    SubitTansactionRequestFromJSON,
    SubitTansactionRequestToJSON,
    SubitTansactionResponseFromJSON,
    SubitTansactionResponseToJSON,
} from '../models';

export interface BuildTransactionRequest {
    appId: string;
    buildTxRequest?: BuildTxRequest;
}

export interface GetTransactionRequest {
    appId: string;
    hash: string;
}

export interface GetTransactionMetadataRequest {
    appId: string;
    hash: string;
}

export interface ListTransactionUtxosRequest {
    appId: string;
    hash: string;
}

export interface SubmitTransactionRequest {
    appId: string;
    subitTansactionRequest?: SubitTansactionRequest;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Build and serialize transaction with custom logic like swap, send, mint, burn etc.
     * Build a transaction
     */
    async buildTransactionRaw(requestParameters: BuildTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildTxResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling buildTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/transactions/build`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuildTxRequestToJSON(requestParameters.buildTxRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildTxResponseFromJSON(jsonValue));
    }

    /**
     * Build and serialize transaction with custom logic like swap, send, mint, burn etc.
     * Build a transaction
     */
    async buildTransaction(requestParameters: BuildTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildTxResponse> {
        const response = await this.buildTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the information about a transaction requested specified by a transaction `hash`.
     * Retrieve Transaction
     */
    async getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveTransactionResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getTransaction.');
        }

        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/transactions/{hash}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveTransactionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the information about a transaction requested specified by a transaction `hash`.
     * Retrieve Transaction
     */
    async getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveTransactionResponse> {
        const response = await this.getTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the transaction metadata specified by a transaction `hash`. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of metadata values. 
     * Retrieve transaction metadata
     */
    async getTransactionMetadataRaw(requestParameters: GetTransactionMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrieveTransactionMetadataResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getTransactionMetadata.');
        }

        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getTransactionMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/transactions/{hash}/metadata`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrieveTransactionMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the transaction metadata specified by a transaction `hash`. The response is paginated. If truncated, the response includes a cursor that you use in a subsequent request to retrieve the next set of metadata values. 
     * Retrieve transaction metadata
     */
    async getTransactionMetadata(requestParameters: GetTransactionMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrieveTransactionMetadataResponse> {
        const response = await this.getTransactionMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the UTXOs from a transaction specified by a transaction `hash`.
     * List transaction UTXOs
     */
    async listTransactionUtxosRaw(requestParameters: ListTransactionUtxosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTransactionUtxosResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling listTransactionUtxos.');
        }

        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling listTransactionUtxos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/transactions/{hash}/utxos`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTransactionUtxosResponseFromJSON(jsonValue));
    }

    /**
     * List the UTXOs from a transaction specified by a transaction `hash`.
     * List transaction UTXOs
     */
    async listTransactionUtxos(requestParameters: ListTransactionUtxosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTransactionUtxosResponse> {
        const response = await this.listTransactionUtxosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit an already serialized transaction to the network.
     * Submit a transaction
     */
    async submitTransactionRaw(requestParameters: SubmitTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubitTansactionResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling submitTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // x-api-key authentication
        }

        const response = await this.request({
            path: `/{app_id}/v1/transactions/submit`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubitTansactionRequestToJSON(requestParameters.subitTansactionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubitTansactionResponseFromJSON(jsonValue));
    }

    /**
     * Submit an already serialized transaction to the network.
     * Submit a transaction
     */
    async submitTransaction(requestParameters: SubmitTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubitTansactionResponse> {
        const response = await this.submitTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
